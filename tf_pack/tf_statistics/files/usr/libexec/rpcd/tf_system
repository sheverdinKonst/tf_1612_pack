#!/usr/bin/env lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 3/6/24 2:58 PM
---

local json          = require "luci.jsonc"
local tf            = require "tf_module"
local md5 			= require "md5"

local function sleep(n)
    os.execute("sleep " .. tonumber(n))
end

local methods = {
    createUser = {
        args = { username = 'string', password = 'string', level = 'string' },
        call = function(f_args)
            local cmd = ""
            local err = ""

            if f_args.username ~= nil and f_args.password ~= nil then
                if f_args.username == "root" then
                    err = "Error: root username is reserved"
                else
                    if f_args.level ~= nil and f_args.level == "full" then
                        cmd = "useradd -d /var/home/" .. f_args.username .. " -m -N -s /bin/runClishAdmin " .. f_args.username .. " 2>&1"
                    else
                        cmd = "useradd -d /var/home/" .. f_args.username .. " -m -N -s /bin/runClishUser " .. f_args.username .. " 2>&1"
                    end
                    local temp = tostring(tf.executeCommand(cmd))
                    if temp == "" or (string.find(temp, "already exists")) then
                        cmd = "usermod -u 0 -o " .. f_args.username
                        temp = tostring(tf.executeCommand(cmd))
                        sleep(1)
                        cmd = "echo " .. f_args.username .. ":" .. f_args.password .. " | chpasswd 2>&1"
                        temp = tostring(tf.executeCommand(cmd))
                        err = "ok"
                    else
                        err = temp--"Error creating user"
                    end
                end
            else
                err = "Error: username or password is null"
            end

            return
            {
                result = err
            }
        end
    },
    deleteUser = {
        args = { username = 'string' },
        call = function(f_args)
            local cmd = ""
            local err = ""

            if f_args.username ~= nil then
                cmd = "userdel -r -f  " .. f_args.username .. " 2>&1"
                local temp = tostring(tf.executeCommand(cmd))
                --
                if temp == nil or (string.find(temp, "does not exist")) then
                    err = "Error deleting user"
                else
                    err = "ok"
                end
            else
                err = "Error: username not set"
            end

            return
            {
                result = err
            }
        end
    },
    generateHash = {
        args = { username = 'string', password = 'string', level = 'string' },
        call = function(f_args)
            local cmd = ""
            local err = ""
            local patternSpase = ":"
            local mac = {}

            if f_args.username ~= nil and f_args.password ~= nil then
                if f_args.level ~= nil and f_args.level == "full" then
                    cmd = "fw_printenv ethaddr 2>&1"
                    local temp = tostring(tf.executeCommand(cmd))
                    if (string.find(temp, "ethaddr")) then
                        temp = string.gsub(temp, "ethaddr=", "")
                        temp = string.gsub(temp, ":", "")
                        temp = string.sub(temp, 1, -2)
                        err = md5.sumhexa(temp .. "+" .. f_args.username .. "+" .. f_args.password)
                    end
                end
            end

            return
            {
                result = err
            }
        end
    }
}

local function parseInput()
    local parse = json.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(json.stringify({ error = err or "Incomplete input" }))
        os.exit(1)
    end

    return parse:get()
end

local function validateArgs(func, uargs)
    local method = methods[func]
    if not method then
        print(json.stringify({ error = "Method not found" }))
        os.exit(1)
    end

    if type(uargs) ~= "table" then
        print(json.stringify({ error = "1 Invalid arguments" }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local k, v
    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or (v ~= nil and type(v) ~= type(margs[k]))
        then
            print(json.stringify({ error = "2 Invalid arguments" }))
            os.exit(1)
        end
    end
    return method
end

if arg[1] == "list" then
    local _, method, rv = nil, nil, {}
    for _, method in pairs(methods) do
        rv[_] = method.args or {}
    end
    print((json.stringify(rv):gsub(":%[%]", ":{}")))
    --print('{ "getStatus": { "arg1": true, "arg2": 32, "arg3": "str" }, "toto": { }, "failme": {} }')
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local result, code = method.call(args)
    print((json.stringify(result):gsub("^%[%]$", "{}")))
    os.exit(code or 0)
end

