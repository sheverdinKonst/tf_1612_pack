#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 7/25/24 10:51 AM
---

local tf = require "tf_module"
local path = "/usr/share/rpcd/acl.d"
local cmd_get_user_config = "ubus call uci get '{\"config\":\"rpcd\",\"type\":\"login\"}'"

local userList =
{
    username    = { "Useer name:    " },
    timeout     = { "\tTimeout:         " },
    read        = { "\tRead access:     " },
    write       = { "\tWrite access:    " }
}

local function countUniqueStrings(array)
    local uniqueStrings = {}

    for _, str in ipairs(array) do
        if not uniqueStrings[str] then
            uniqueStrings[str] = true
        end
    end

    local count = 0
    for _ in pairs(uniqueStrings) do
        count = count + 1
    end

    return count
end

local function getPermitionList(file_names)
    local permition_name = {}
    for _, v in pairs(file_names) do
        --print("----------------------------------------")
        --print(v)
        local jsonInfo = tf.collectJsonTable("cat " .. path .. "/" .. v)
        if jsonInfo ~= nil then
            for name, t in pairs(jsonInfo) do
                table.insert(permition_name, name)
            end
        else
            print("json not valid")
        end
    end
    return permition_name
end

local function getCountAppPermition()
    local get_app_list = "ls " .. path
    local app_list = tf.executeCommand(get_app_list)

    local file_names = {}
    local permition_name = {}
    local count = 0
    for line in app_list:gmatch("[^\r\n]+") do
        table.insert(file_names, line)
    end

    if file_names ~= nil then
        permition_name = getPermitionList(file_names)
    else
        print("error: app list is empty")
    end
    count = countUniqueStrings(permition_name)
    return count
end

local function run_show_user()
    local count = getCountAppPermition()
    local user_jsonInfo = tf.collectJsonTable(cmd_get_user_config)

    user_jsonInfo = user_jsonInfo.values
    if user_jsonInfo ~= nil then
        for _, dict in pairs(user_jsonInfo) do
            print("..............................................")
            print(userList.username[1] .. dict.username)
            -- if (dict.timeout ~= nil) then
            --     print(userList.timeout[1] .. dict.timeout .. " sec")
            -- else
            --     print(userList.timeout[1] .. 300 .. " sec")
            -- end

            if (dict.read ~= nil) then
                local read_arr = dict.read
                if #read_arr == 1 and read_arr[#read_arr] then
                    print(userList.read[1] .. "full access")
                elseif #read_arr > 1 then
                    print(userList.read[1] .. "partial access -- " .. #read_arr .. " from " .. count)
                end
            else
                print(userList.read[1] .. "denied")
            end

            if (dict.write ~= nil) then
                local write_arr = dict.write
                if #write_arr == 1 and write_arr[#write_arr] then
                    print(userList.write[1] .. "full access")
                elseif #write_arr > 1 then
                    print(userList.read[1] .. "partial access -- " .. #write_arr .. " from " .. count)
                end
            else
                print(userList.write[1] .. "denied")
            end
        end
    else
        print("user not found")
    end
end

run_show_user()
