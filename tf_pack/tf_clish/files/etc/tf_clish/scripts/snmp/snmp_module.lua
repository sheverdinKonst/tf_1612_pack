---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 11/21/24 6:17 PM
---

local tf = require "tf_module"
local cmd_getConfig = "ubus call uci get '{\"config\":\"snmpd\"}'"

local snmp_module = {}

local general =
{
    state           = "",
    port            = "",
}

local v1_v2_param =
{
    read_community = "",
    write_community = "",
    read_access = "",
    write_access = ""
}

local v1 =
{
    version         = "",
    version_state   = "",
    v1_v2_param     = v1_v2_param
}

local v2c =
{
    version         = "",
    version_state   = "",
    v1_v2_param     = v1_v2_param,
}

local v3 =
{
    version_state           = "",
    version                 = "",
    snmp_v3_username        = "",
    snmp_v3_allow_write     = "",
    snmp_v3_auth_type       = "",
    snmp_v3_auth_pass       = "",
    snmp_v3_privacy_type    = "",
    snmp_v3_privacy_pass    = ""
}

local log =
{
    log_syslog              = "",
    log_syslog_facility     = "",
    log_syslog_priority     = ""
}

local trap =
{
    trap_enabled        = "",
    trap_snmp_version   = "",
    trap_host           = "",
    trap_port           = "",
    trap_community      = ""
}

snmp_module.snmp_config =
{
    general = general,
    v1 = v1,
    v2c = v2c,
    v3 = v3,
    log = log,
    trap = trap
}


snmp_module.comm_suffix =
{
    read_com = "ro",
    write_com = "rw"
}

snmp_module.snmp_argList =
{
    state       = "",
    port        = "",
    version     = "",
    com         = "",
    source      = ""
}

snmp_module.snmp_v3_argList =
{
    username        = "",
    allow_write     = "",
    auth_type       = "",
    auth_pass       = "",
    privacy_type    = "",
    privacy_pass    = ""
}

snmp_module.access_struct =
{
    read_community = "read_access",
    write_community = "write_access"
}

snmp_module.paramList = {
    state   = { numArg = 1, value = "" },
    port    = { numArg = 1, value = "" },
    version = { numArg = 2, value = "", state = "" },
    com     = { numArg = 2, value = "", name = "" },
    source  = { numArg = 3, value = "", host = "", mask = "" },
}

local com2sec_struct =
{
    ".type",
    ".name",
    "secname",
    "source",
    "community"
}

local v_struct =
{
    ".type",
    ".name",
    "group",
    "version",
    "secname",
}

local access_struct =
{
    ".type",
    ".name",
    "group",
    "context",
    "version",
    "level",
    "prefix",
    "read",
    "write",
    "notify"
}

function snmp_module.get_config()
    local snmp_config = tf.collectJsonTable(cmd_getConfig)
    if snmp_config == nil and snmp_config["values"] == nil then
        print("error: config is wrong")
        return
    end

    snmp_config = snmp_config["values"]
    local version_1 = ""
    local version_3 = ""
    for _, v in pairs(snmp_config) do
        if v[".type"] == "general" then
            snmp_module.snmp_config.general.state = v["enabled"]
            snmp_module.snmp_config.general.port = v["port"]
        elseif v[".type"] == "snmp_v1" or v[".type"] == "snmp_v2c" then
            version_1 = v["version"]
            local v1v2_param = {}
            snmp_module.snmp_config[version_1].version = v["version"]
            snmp_module.snmp_config[version_1].version_state = v["version_state"]
            v1v2_param["read_community"]  = v["read_community"]
            v1v2_param["write_community"] = v["write_community"]
            v1v2_param["read_access"]     = v["read_access"]
            v1v2_param["write_access"]    = v["write_access"]
            snmp_module.snmp_config[version_1].v1_v2_param = v1v2_param
        elseif v[".type"] == "snmp_v3" then
            version_3 = v["version"]
            snmp_module.snmp_config[version_3].version       = v["version"]
            snmp_module.snmp_config[version_3].version_state = v["version_state"]
            snmp_module.snmp_config[version_3].username      = v["username"]
            snmp_module.snmp_config[version_3].allow_write   = v["allow_write"]
            snmp_module.snmp_config[version_3].auth_type     = v["auth_type"]
            snmp_module.snmp_config[version_3].auth_pass     = v["auth_pass"]
            snmp_module.snmp_config[version_3].privacy_type  = v["privacy_type"]
            snmp_module.snmp_config[version_3].privacy_pass  = v["privacy_pass"]
        end
    end
end

return snmp_module
