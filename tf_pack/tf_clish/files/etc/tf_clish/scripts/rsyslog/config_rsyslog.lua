#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 6/4/24 5:48 PM
---
local tf = require "tf_module"

local cmd_set_system_config = "uci set system.system."
local cmd_add_new_section = "ubus call uci add '{\"config\":\"rsyslog\",\"type\":\"selector\"}'"
local cmd_get_rsyslog_config = "ubus call uci get '{\"config\":\"rsyslog\"}'"
local cmd_get_system_config = "ubus call uci get '{\"config\":\"system\"}'"
local cmd_delete_section = "ubus call uci  delete '{\"config\":\"rsyslog\",\"section\":\""

local log_config = {}
local log_config_arr = {}
local log_proto_sym = {
    tcp = "@@",
    udp = "@"
}

local log_ip     = ""
local log_port   = ""
local log_proto  = ""
local log_state  = ""

local function log_checkInitParam()
    local status = "OK"

    local cmd = cmd_get_system_config
    local systemInfo = tf.collectJsonTable(cmd)
    systemInfo = systemInfo.values.system

    if systemInfo.log_ip ~= nil then
        log_ip = systemInfo.log_ip
    else
        status = "not_defined"
    end

    if systemInfo.log_port ~= nil then
        log_port = systemInfo.log_port
    else
        status = "not_defined"
    end

    if systemInfo.log_proto ~= nil then
        log_proto = systemInfo.log_proto
    else
        status = "not_defined"
    end

    if systemInfo.log_state ~= nil then
        log_state = systemInfo.log_state
    else
        status = "not_defined"
        print("log STATE not defined")
    end
    return status
end

local function log_disableRemoteParam()
    local cmd = cmd_get_rsyslog_config
    local logInfo = tf.collectJsonTable(cmd)
    if logInfo == nil or logInfo.values == nil then
        return 0
    else
        logInfo = logInfo.values
        for _, list in pairs(logInfo) do
            if list[".type"] ~= nil then
                if list[".type"] == "selector" then
                    local firstsym = ""
                    if list["destination"] ~= nil then
                        local destination = list["destination"]
                        firstsym = string.sub(destination, 1, 1)
                    end
                    if list["destination"] == nil or list["source"] == nil or firstsym == "@" then
                        cmd = cmd_delete_section .. list[".name"] .. "\"}'"
                        tf.executeCommand(cmd)
                    end
                end
            end
        end
    end
    return 1
end

local function log_setRemoteParam()
    local cmd = cmd_get_rsyslog_config
    local logInfo = tf.collectJsonTable(cmd)
    logInfo = logInfo.values
    for _, list in pairs(logInfo) do
        if list[".type"] ~= nil then
            if list[".type"] == "selector" then
                local source = list["source"]
                local destination = list["destination"]
                if source ~= nil then
                    if destination ~= nil then
                        source = tf.addBackSlash(source)
                        local res = tf.collectJsonTable(cmd_add_new_section)
                        local section = res["section"]
                        local proto = log_proto_sym[log_proto]
                        cmd = "ubus call uci set '{\"config\":\"rsyslog\",\"type\":\"selector\",\"section\":\"" .. section ..
                            "\", \"values\":{\"destination\":\"" .. proto .. log_ip .. ":" .. log_port .. "\", \"source\":\"" .. source .. "\"}}'"
                        tf.executeCommand(cmd)
                    end
                end
            end
        end
    end
    return 2
end

local function run_config_log()
    local errorCode = 0
    errorCode = tf.validateParam(2, arg)
    if errorCode == 0 then
        local cmd = cmd_set_system_config .. arg[1] .. "=" .. arg[2]
        tf.executeCommand(cmd)
        --tf.saveChanges(0)
        local status = log_checkInitParam()
        if status == "not_defined" then
            return 0
        end
        errorCode = log_disableRemoteParam()
        if errorCode == 0 then
            print("Error to get log config")
        end

        if tonumber(log_state) == 1 then
            errorCode = log_setRemoteParam()
            cmd = "rsyslog"
            print("wait, applying configuration ................... ")
            tf.saveChanges(1, cmd)
        elseif tonumber(log_state) == 0 then
            print("\t log_state param is 'disabled'")
        end
    end
end

run_config_log()
