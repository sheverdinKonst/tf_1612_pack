#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 8/6/24 2:11 PM
---
package.path = "/etc/tf_clish/scripts/rsyslog/?.lua;" .. package.path

local tf      = require "tf_module"
local log = require "log_module"

local log_ubus_cmd_add_filter = "ubus call uci add '{\"config\":\"log\",\"type\":\"filter\"}'"
local log_ubus_cmd_add_action = "ubus call uci add '{\"config\":\"log\",\"type\":\"action\"}'"
local log_ubus_cmd_add_rule   = "ubus call uci add '{\"config\":\"log\",\"type\":\"rule\"}'"

local filter_listArg    = {}
local filter_listConfig = {}

local action_listArg    = {}
local action_listConfig = {}

local rule_listArg      = {}
local rule_listConfig   = {}

local function log_getparam(argList, paramList)
    --print("-------------- log_getparam")
    local i = 3
    local j = 1
    while arg[i] ~= nil do
        if arg[i] == paramList[j] then
            --print("paramList[j]  = " .. paramList[j])
            --print("arg[" .. i .. "]" .. arg[i])
            if arg[i + 1] ~= "" and arg[i + 1] ~= nil then
                argList[paramList[j]] = arg[i + 1]
            end
        end
        i = i + 2
        j = j + 1
    end

    --print("-------------------- log_getparam: ")
    --for key, value in pairs(argList) do
    --    print("key = " .. key)
    --    print("value = " .. value)
    --end
end

local function log_find_byName(name, listConfig)
    local is_find = false
    --log_filterListArg
    --log_filterListConfig

    if listConfig[name] ~= nil then
        is_find = true
    end
    return is_find
end

local function log_filter_edit(is_find)
    local section = ""
    local log_ubus_set_section = ""
    local log_ubus_set_1 = "ubus call uci set '{\"config\":\"log\",\"type\":\"filter\",\"section\":\""
    local log_ubus_set_2 = "\","

    local log_ubus_set_value = "\"values\":{"
    local log_ubus_set_value_1 = ""

    local count = 0
    local log_ubus_set_value_list = {}
    local name = ""
    if is_find == false then
        local res = tf.collectJsonTable(log_ubus_cmd_add_filter)
        section = res["section"]
        if filter_listArg.name ~= "" and filter_listArg.name ~= nil then
            count = count + 1
            log_ubus_set_value_list[count] = "\"name\":\"" .. filter_listArg.name .. "\""
        end
    elseif is_find == true then
        name = filter_listArg.name
        section = filter_listConfig[name].section
    end

    log_ubus_set_section = section
    if filter_listArg.facility ~= "" and filter_listArg.facility ~= nil then
        count = count + 1
        log_ubus_set_value_list[count] = "\"facility\":\"" .. filter_listArg.facility .. "\""
    end

    if filter_listArg.severity ~= "" and filter_listArg.severity ~= nil then
        count = count + 1
        log_ubus_set_value_list[count] = "\"severity\":\"" .. filter_listArg.severity .. "\""
    end

    if filter_listArg.progname ~= "" and filter_listArg.progname ~= nil then
        count = count + 1
        log_ubus_set_value_list[count] = "\"progname\":\"" .. filter_listArg.progname .. "\""
    end

    if filter_listArg.content ~= "" and filter_listArg.content ~= nil then
        count = count + 1
        log_ubus_set_value_list[count] = "\"content\":\"" .. filter_listArg.content .. "\""
    end

    local log_ubus_cmd = log_ubus_set_1 .. log_ubus_set_section .. log_ubus_set_2 .. log_ubus_set_value

    if count == 0 then
        print("error: Filter \"" .. name .. "\" is presented, need to set any parameter")
        return 1
    elseif count == 1 then
        log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[1]
    elseif count > 1 then
        for j = 1, count - 1 do
            log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[j] .. ","
        end
        log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[count]
    end
    log_ubus_cmd = log_ubus_cmd .. log_ubus_set_value_1 .. "}}'"
    --print("count = " .. count)
    --print("log_ubus_set_value_1  = " .. log_ubus_set_value_1)
    --print("log_ubus_cmd 2 = " .. log_ubus_cmd)
    tf.executeCommand(log_ubus_cmd)
end

local function log_action_edit(is_find)
    local section = ""
    local log_ubus_set_section = ""
    local log_ubus_set_1 = "ubus call uci set '{\"config\":\"log\",\"type\":\"action\",\"section\":\""
    local log_ubus_set_2 = "\","

    local log_ubus_set_value = "\"values\":{"
    local log_ubus_set_value_1 = ""
    local name = ""
    local count = 0
    local log_ubus_set_value_list = {}

    if is_find == false then
        local res = tf.collectJsonTable(log_ubus_cmd_add_action)
        section = res["section"]
        if action_listArg.name ~= "" and action_listArg.name ~= nil then
            count = count + 1
            log_ubus_set_value_list[count] = "\"name\":\"" .. action_listArg.name .. "\""
        end
    elseif is_find == true then
        name = action_listArg.name
        section = action_listConfig[name].section
    end

    log_ubus_set_section = section
    if action_listArg.action ~= "" and action_listArg.action ~= nil then
        count = count + 1
        log_ubus_set_value_list[count] = "\"action\":\"" .. action_listArg.action .. "\""
    end
    if action_listArg.log_email ~= "" and action_listArg.log_email ~= nil then
        count = count + 1
        --local email_string = "test@example.com, invalid_email.com, another@example.com"
        local valid_emails = tf.parse_emails(action_listArg.log_email)
        local email_str = log.getValue_str(valid_emails)
        log_ubus_set_value_list[count] = "\"log_email\":" .. email_str .. "]"
    end
    if action_listArg.log_syslog ~= "" and action_listArg.log_syslog ~= nil then
        count = count + 1
        local valid_ip = tf.parse_ip(action_listArg.log_syslog)
        local ip_str = log.getValue_str(valid_ip)
        log_ubus_set_value_list[count] = "\"log_syslog\":" .. ip_str .. "]"
    end

    local log_ubus_cmd = log_ubus_set_1 .. log_ubus_set_section .. log_ubus_set_2 .. log_ubus_set_value

    if count == 0 then
        print("error: Action \"" .. name .. "\" is presented, need to set any parameter")
        return 1
    elseif count == 1 then
        log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[1]
    elseif count > 1 then
        for j = 1, count - 1 do
            log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[j] .. ", "
        end
        log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[count]
    end
    log_ubus_cmd = log_ubus_cmd .. log_ubus_set_value_1 .. "}}'"
    tf.executeCommand(log_ubus_cmd)
end

local function log_rule_edit(is_find)
    local section = ""
    local log_ubus_set_section = ""
    local log_ubus_set_1 = "ubus call uci set '{\"config\":\"log\",\"type\":\"rule\",\"section\":\""
    local log_ubus_set_2 = "\","

    local log_ubus_set_value = "\"values\":{"
    local log_ubus_set_value_1 = ""
    local name = ""
    local count = 0
    local log_ubus_set_value_list = {}

    if is_find == false then
        local res = tf.collectJsonTable(log_ubus_cmd_add_action)
        section = res["section"]
        if rule_listArg.name ~= "" and rule_listArg.name ~= nil then
            count = count + 1
            log_ubus_set_value_list[count] = "\"name\":\"" .. rule_listArg.name .. "\""
        end
    elseif is_find == true then
        name  = rule_listArg.name
        section     = rule_listConfig[name].section
    end

    log_ubus_set_section = section

    if rule_listArg.filter ~= "" and rule_listArg.filter ~= nil then
        count = count + 1
        log_ubus_set_value_list[count] = "\"filter\":\"" .. rule_listArg.filter .. "\""
    end

    if rule_listArg.action ~= "" and rule_listArg.action ~= nil then
        count = count + 1
        log_ubus_set_value_list[count] = "\"action\":\"" .. rule_listArg.action .. "\""
    end

    local log_ubus_cmd = log_ubus_set_1 .. log_ubus_set_section .. log_ubus_set_2 .. log_ubus_set_value

    if count == 0 then
        print("error: Rule \"" .. name .. "\" is presented, need to set any parameter")
        return 1
    elseif count == 1 then
        log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[1]
    elseif count > 1 then
        for j = 1, count - 1 do
            log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[j] .. ", "
        end
        log_ubus_set_value_1 = log_ubus_set_value_1 .. log_ubus_set_value_list[count]
    end
    log_ubus_cmd = log_ubus_cmd .. log_ubus_set_value_1 .. "}}'"
    --print("log_ubus_cmd 2 = " .. log_ubus_cmd)
    tf.executeCommand(log_ubus_cmd)
end

local function filter_handler()
    log_getparam(filter_listArg, log.filter_paramList)
    log.getFilter_list(filter_listConfig)
    local name = filter_listArg.name
    local is_find = log_find_byName(name, filter_listConfig)
    if arg[2] == "add" or arg[2] == "edit" then
        log_filter_edit(is_find)
    elseif arg[2] == "delete" then
        if filter_listConfig[name] ~= nil then
            log.deleteSection(name, filter_listConfig)
        elseif filter_listConfig[name] == nil then
            print("error: Filter \"" .. name .. "\" not presented")
        end
    end
end

local function action_handler()
    log_getparam(action_listArg, log.action_paramList)
    log.getAction_list(action_listConfig)
    local name = action_listArg.name
    local is_find = log_find_byName(name, action_listConfig)
    if arg[2] == "add" or arg[2] == "edit" then
        log_action_edit(is_find)
    elseif arg[2] == "delete" then
        if action_listConfig[name] ~= nil then
            log.deleteSection(name, action_listConfig)
        elseif action_listConfig[name] == nil then
            print("error: Action \"" .. name .. "\" not presented")
        end
    end
end

local function rule_handler()
    log_getparam(rule_listArg, log.rule_paramList)
    log.getRules_list(filter_listConfig)
    local name = rule_listArg.name

    if arg[2] == "add" or arg[2] == "edit" then
        log.getFilter_list(filter_listConfig)
        log.getAction_list(action_listConfig)

        local error = 0
        local error_name = 0

        if rule_listArg["filter"] ~= "" and rule_listArg["filter"] ~= nil then
            local filter_name = rule_listArg["filter"]
            if filter_listConfig[filter_name] == nil then
                print("error: Filter " .. filter_name .. " not found")
                print("info: add new filter \"system log config filter add <params>\"  or use from list: ")
                log.print_filterListConfig("name", filter_listConfig)
                error = 1
            end
        else
            error_name = 1
        end

        if rule_listArg["action"] ~= "" and rule_listArg["action"] ~= nil then
            local action_name = rule_listArg["action"]
            if action_listConfig[action_name] == nil then
                print("error: Action \"" .. action_name .. "\" not found")
                print("info: add new action \"system log config action add <params>\"  or use from list: ")
                log.print_actionListConfig("name", action_listConfig)
                error = 1
            end
        else
            error_name = error_name + 1
        end
        if (error_name > 1) then
            print("error: \"Filter\" or \"Action\" must be presented")
            return 1
        end

        if error == 0 then
            local is_find = log_find_byName(name, rule_listConfig)
            log_rule_edit(is_find)
        end
    elseif arg[2] == "delete" then
        if rule_listConfig[name] ~= nil then
            log.deleteSection(name, rule_listConfig)
        elseif rule_listConfig[name] == nil then
            print("error: Rule \"" .. name .. "\" not presented")
        end
    end
end

local logConfig_list = {
    filter  = { name = "filter", func = filter_handler },
    action  = { name = "action", func = action_handler },
    rule    = { name = "rule",   func = rule_handler },
}

local function run_log_config()
    local logParam = arg[1]
    logConfig_list[logParam].func()
end

run_log_config()


