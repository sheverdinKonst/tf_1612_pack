#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 7/25/24 5:14 PM
---

local tf = require "tf_module"

local stat_nameList =
{
    { name = "collisions",    str = "\tcollisions:      " },
    { name = "multicast",     str = "\tmulticast        " },
    { name = "bytes",         str = "\t\tbytes:           " },
    { name = "compressed",    str = "\t\tcompressed:      " },
    { name = "dropped",       str = "\t\tdropped:         " },
    { name = "errors",        str = "\t\terrors:          " },
    { name = "fifo_errors",   str = "\t\tfifo_errors:     " },
    { name = "frame_errors",  str = "\t\tframe_errors:    " },
    { name = "missed_errors", str = "\t\tmissed_errors:   " },
    { name = "nohandler    ", str = "\t\tno handler:      " },
    { name = "over_errors  ", str = "\t\tover errors:     " },
    { name = "packets      ", str = "\t\tpackets:         " }
}

local statistics_path = "/sys/class/net/lan"
local statistics_dir = "/statistics/"


local function print_packets(port)
    port = tonumber(port)
    local cmd = ""
    local value = ""
    local path_lan = statistics_path .. tostring(port) .. statistics_dir

    --print("cmd = " .. cmd)
    --print("len = " .. #stat_nameList)
    local filesList = tf.getFilesInDirectory(path_lan)
    if filesList[stat_nameList[1].name] ~= nil then
        local path_name = path_lan .. stat_nameList[1].name
        cmd = "cat " .. path_name
        value = tf.executeCommand(cmd)
        value = value:sub(1, -2) -- удалить последнюю запятую и пробел
        print(stat_nameList[1].str .. value)
    end
    cmd = ""
    if filesList[stat_nameList[2].name] ~= nil then
        local path_name = path_lan .. stat_nameList[2].name
        cmd = "cat " .. path_name
        value  = tf.executeCommand(cmd)
        value = value:sub(1, -2)
        print(stat_nameList[2].str .. value)
    end

    print("\tRX statistics: ")
    for i = 3, #stat_nameList do
        local path_name = "rx_" .. stat_nameList[i].name
        if filesList[path_name] ~= nil then
            path_name = path_lan .. path_name
            cmd = "cat " .. path_name
            value = tf.executeCommand(cmd)
            value = value:sub(1, -2)
            print(stat_nameList[i].str .. value)
        end

    end
    print("\tTX statistics: ")
    for i = 3, #stat_nameList do
        local path_name = "tx_" .. stat_nameList[i].name
        if filesList[path_name] ~= nil then
            path_name = path_lan .. path_name
            cmd = "cat " .. path_name
            value = tf.executeCommand(cmd)
            value = value:sub(1, -2)
            print(stat_nameList[i].str .. value)
        end
    end
end

local function set_port_config()
    local portRange = tf.checkPortRange(arg[1])
    local cmd = "ubus call uci get '{\"config\":\"port\"}'"
    local portInfo = tf.collectJsonTable(cmd)
    local portsList = portInfo.values
    local count = 0
    for _, list in pairs(portsList) do
        if type(list) == "table" then
            if list.poe ~= nil then
                count = count + 1
            end
        end
    end

    if portRange[3] == "once" then
        print("Port:\t" .. portRange[1] .. "\t......................................")
        print_packets(portRange[1])
    elseif portRange[3] == "range" then
        for index = portRange[1], portRange[2] do
            print("Port:\t" .. index .. "\t......................................")
            print_packets(index)
        end
    else
        print("port range not corrected")
    end
end

set_port_config()








