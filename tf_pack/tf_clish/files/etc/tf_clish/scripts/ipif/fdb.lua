#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 7/24/24 5:04 PM
---

local tf = require "tf_module"

local fdbList =
{
    { "mac",         "\tMAC address:   " },
    { "vid",         "\tVLAN id:       " },
    { "interface",   "\tInterface:     " }
}

local arpList =
{
    { "ip",      "\tIP address:      " },
    { "mac",     "\tMAC address:     " },
    { "device",  "\tDevice:          " }
}

local function runf_fdb(port)
    local fdb = require "fdb_module"
    local fdb_strInfo = fdb.getJson()
    local fdb_jsonInfo = tf.decodeToJson(fdb_strInfo)
    if fdb_jsonInfo ~= nil then
        for i, list in pairs(fdb_jsonInfo) do
            local lan_str = list[fdbList[3][1]]
            --print("lan_str = " .. list[fdbList[3][1]])
            local str, num = lan_str:match("(%a+)(%d+)")
            --print("num= " .. num .. " port = " .. port)
            for j, fdb_row in pairs(fdbList) do
                if (tonumber(num) == tonumber(port)) then
                    print(fdb_row[2] .. list[fdb_row[1]])
                end
            end
        end
    else
        print("error: fdb table not found")
    end
end

local function runf_arp(port)
    local arp = require "arp_module"
    local arp_strInfo = arp.getJson()
    local arp_jsonInfo = tf.decodeToJson(arp_strInfo)
    if arp_jsonInfo ~= nil then
        for i, list in pairs(arp_jsonInfo) do
            for j, arp_row in pairs(arpList) do
                print(arp_row[2] .. list[arp_row[1]])
            end
        end
    else
        print("error: arp table not found")
    end
end

local function run_mian_net()
    if arg[1] == "arp" then
        runf_arp(index)
    elseif arg[1] == "fdb" then

        local portRange = tf.checkPortRange(arg[2])
        local cmd = "ubus call uci get '{\"config\":\"port\"}'"
        local portInfo = tf.collectJsonTable(cmd)
        local portsList = portInfo.values
        local count = 0
        for _, list in pairs(portsList) do
            if type(list) == "table" then
                if list.poe ~= nil then
                    count = count + 1
                end
            end
        end
        if portRange[3] == "once" then
            print("Port:\t" .. portRange[1] .. "\t......................................")
            runf_fdb(portRange[1])
        elseif portRange[3] == "range" then
            for index = portRange[1], portRange[2] do
                print("Port:\t" .. index .. "\t......................................")
                runf_fdb(index)
            end
        else
            print("port range not corrected")
        end
    end
end

run_mian_net()



