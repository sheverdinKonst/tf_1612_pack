#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 7/26/24 5:47 PM
---

local tf = require "tf_module"

local ubus_port_cmd_config = "ubus call uci get '{\"config\":\"port\"}'"
local ubus_port_cmd_staus = "ubus call luci-rpc getNetworkDevices"

local port_jsonInfo = {}

local portList =
{
    {name = "state", str = "\tstate:    " },
    {name = "speed", str = "\tspeed:    " },
    {name = "flow",  str = "\tflow:     " },
    {name = "poe",   str = "\tpoe:      " },
}

local linkParam = {
    { name = "speed",      str = "\tspeed:      " },
    { name = "duplex",     str = "\tduplex:     " },
    { name = "carrier",    str = "\tcarrier:    " },
    { name = "changes",    str = "\tchanges:    " },
    { name = "up_count",   str = "\tup count:   " },
    { name = "down_count", str = "\tdown count  " }
}

local port_status = {
    { name = "up",            str = "\tlink:       ", param = nil },
    { name = "mtu",           str = "\tMTU:        ", param = nil },
    { name = "link",          str = "Link:       ", param = linkParam },
}

local linkEnum = {
    ["true"]  = "up",
    ["false"] = "down"
}

local function run_port_show_status(port)
    local port_status_jsonInfo = tf.collectJsonTable(ubus_port_cmd_staus)
    local sectionName = "lan" .. port
    local portDict = port_status_jsonInfo[sectionName]
    local flag = false
    for _, row in pairs(port_status) do
        if portDict[row.name] ~= nil then
            if row.param == nil then
                if type(portDict[row.name]) == "boolean" then
                    if (row.name == "up" and portDict[row.name] == true) then
                        flag = true
                    end
                    local value = tostring(portDict[row.name])
                    print(row.str .. linkEnum[value])
                else
                    print(row.str .. portDict[row.name])
                end
            elseif row.param ~= nil then
                if flag == true then
                    local name = row.name
                    local portLink = portDict[name]
                    for _, row_param in pairs(row.param) do
                        if type(portLink[row_param.name]) == "boolean" then
                            local value = tostring(portLink[row_param.name])
                            print(row_param.str .. linkEnum[value])
                        else

                            print(row_param.str .. portLink[row_param.name])
                        end
                    end
                end
            end
        end
    end
end

local function run_port_show_config(port)
    local sectionName = "lan" .. port
    local portDict = port_jsonInfo[sectionName]
    for _, dict in pairs(portList) do
        if (portDict[dict.name] ~= nil) then
            print(dict.str .. portDict[dict.name])
        else
            if dict.name == "poe" then
                print(dict.str .. "disable")
            end
        end
    end
end

local cmd_ioList =
{
    status = { cmd = "status", func = run_port_show_status },
    config = { cmd = "config", func = run_port_show_config },
}

local function f_select(index)
    local cmd = arg[1]
    local cmd_list = cmd_ioList[cmd]
    cmd_list.func(index)
end

local function run_show_ports()
    local portRange = tf.checkPortRange(arg[2])
    port_jsonInfo = tf.collectJsonTable(ubus_port_cmd_config)
    port_jsonInfo = port_jsonInfo.values
    local count = 0
    for _, list in pairs(port_jsonInfo) do
        if type(list) == "table" then
            if list.poe ~= nil then
                count = count + 1
            end
        end
    end

    if portRange[3] == "once" then
        print("Port:\t" .. portRange[1] .. "\t......................................")
        f_select(portRange[1])
    elseif portRange[3] == "range" then
        for index = portRange[1], portRange[2] do
            print("Port:\t" .. index .. "\t......................................")
            f_select(index)
        end
    else
        print("port range not corrected")
    end
end

run_show_ports()

