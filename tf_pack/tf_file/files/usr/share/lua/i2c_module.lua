#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 4/11/24 9:48 AM
---

local tf        = require "tf_module"
--local utilities = require "tf_utilities"
--local sht       = require "hw_sensor_module"

local i2c_module = {}

i2c_module.sfpList =
{
    {name = "portSfpVendor",         str = "vendor:             " },
    {name = "FIBER_TEC",             str = "fiber tec:          " },
    {name = "portSfpPartNumber",     str = "part #:             " },
    {name = "portSfpRevision",       str = "revision:           " },
    {name = "portSfpPresent",        str = "present:            " },
    {name = "portSfpSignalDetect",   str = "signal detect:      " },
    {name = "portSfpOui",            str = "oui:                " },
    {name = "IDENTIFIER",            str = "id:                 " },
    {name = "CONNECTOR",             str = "connector:          " },
    {name = "LINK_LEN",              str = "link len:           " },
    {name = "TYPE",                  str = "type:               " },
    {name = "MEDIA",                 str = "media:              " },
    {name = "SPEED",                 str = "speed:              " },
    {name = "ENCODING",              str = "encoding:           " },
    {name = "NBR",                   str = "nbr:                " },
    {name = "LEN9",                  str = "len 9:              " },
    {name = "LEN50",                 str = "len 50:             " },
    {name = "LEN62",                 str = "len 62:             " },
    {name = "LENC",                  str = "lenc:               " },
    {name = "portSfpTemperature",    str = "\tTechnical param: \n\t\ttemperature:        " },
    {name = "WAVELEN",               str = "\t\twavelen:            " },
    {name = "portSfpVoltage",        str = "\t\tvoltage             " },
    {name = "CURRENT",               str = "\t\tcurrent:            " },
    {name = "portSfpBiasCurrent",    str = "\t\tbias current:       " },
    {name = "portSfpRxOutPower",     str = "\tPower:\n\t\trx out power [W]:   " },
    {name = "portSfpRxOutPowerDb",   str = "\t\trx out power [dB]:  " },
    {name = "portSfpTxOutPower",     str = "\t\ttx out power [W]:   " },
    {name = "portSfpTxOutPowerDb",   str = "\t\ttx out power [dB]:  " },
}

i2c_module.ups_list =
{
    { name = "RPS_SW_VERS",         str = "UPS papmetrs:\n\tSW version:          ", enumValue = nil },
    { name = "RPS_HW_VERS",         str = "\tHW version:          ", enumValue = nil },
    { name = "upsModeAvalible",     str = "\tmode:                ", enumValue = { "true", "false" } },
    { name = "upsPwrSource",        str = "\tpower source:        ", enumValue = { "battery", "AC" } },
    { name = "RPS_TEMPER",          str = "\temperature:          ", enumValue = nil },
    { name = "RPS_CHRG_VOLTAGE",    str = "\tcharging voltage:    ", enumValue = nil },
    { name = "upsBatteryVoltage",   str = "\tBattery:\n\t\tvoltage:     ", enumValue = nil },
    { name = "RPS_BAT_CURRENT",     str = "\t\tcurrent:     ", enumValue = nil },
    { name = "upsBatteryTime",      str = "\t\tlifetime:    ", enumValue = nil },
}

local inputList =
{
    state        = "\tstate:        ",
    alarm_state  = "\talarm state:  "
}

i2c_module.sensorList = {
    {name = "tamper",  name_str = "Tamper:",   msg = inputList },
    {name = "sensor1", name_str = "Sensor 1:", msg = inputList },
    {name = "sensor2", name_str = "Sensor 2:", msg = inputList },
    {name = "relay",   name_str = "Relay:",    msg = inputList }
}

i2c_module.hw_sysEnum = {
    main        = nil,
    sensors     = i2c_module.sensorList,
    output		= nil,
    ups         = i2c_module.ups_list,
    sht         = nil,
    sfp1        = i2c_module.sfpList,
    sfp2        = i2c_module.sfpList,
    rtc         = nil,
    poe         = nil,
    system      = nil,
    autorestart = nil,
}

function i2c_module.get_sensorsData()
    local res = {}
    for key, func in pairs(hw_sysEnum.sensors) do
        print("key = " .. key)
        res[key] = func(0, key)
    end
    return res
end


function i2c_module.showConfig(portNum)
    local resConfig = {}
    local cmd = ""
    if portNum == "all" then
        cmd = "ubus call uci get '{\"config\":\"tfortis_io\"}'"
    else
        cmd = "ubus call uci get '{\"config\":\"tfortis_io\", \"section\":\"" .. portNum .. "\"}'"
    end
    resConfig = tf.collectJsonTable(cmd)
    return resConfig
end

return i2c_module
